name: Deploy to AWS Lambda

on:
  push:
    branches:
      # - main
      - develop
    paths:
      - 'package.json'
      - 'src/**'

  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    env:
      TZ: ${{ vars.TZ }}
      STAGE: ${{ vars.STAGE }}
      NODE_ENV: ${{ vars.NODE_ENV }}
      NO_COLOR: ${{ vars.NO_COLOR }}

      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      INTHASH_KEY: ${{ secrets.INTHASH_KEY }}

      JWT_ACCESS_EXPIRES_IN: ${{ vars.JWT_ACCESS_EXPIRES_IN }}
      JWT_REFRESH_EXPIRES_IN: ${{ vars.JWT_REFRESH_EXPIRES_IN }}

      DB_URL: mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ vars.DB_HOST }}:${{ vars.DB_PORT }}/${{ vars.DB_NAME }}_dev

      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_S3_BUCKET_NAME: ${{ vars.AWS_S3_BUCKET_NAME }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to AWS ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install Serverless Framework and Setup Environment Variables
        run: |
          npm install -g serverless serverless-domain-manager
          echo "NOW=$(date +%Y-%m-%dT%H:%M:%S%z)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.ecr.outputs.registry }}/promise-api-${{ env.STAGE }}:appimage
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: NOW=${{ env.NOW }}

      - name: Deploy to AWS Lambda
        run: serverless deploy --verbose --stage ${{ env.STAGE }}
